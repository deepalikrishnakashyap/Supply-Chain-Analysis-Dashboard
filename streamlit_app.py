# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wMRY_P3LCbOS9OtIOxugsd5Z-UKgMg9U
"""

!pip install duckdb
import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import os
import duckdb
import time

st.set_page_config(page_title="Supply Chain Dashboard", page_icon=":bar_chart:", layout="wide")

# Caching the function to load the dataset
@st.cache_data
def load_data(file_path):
    return pd.read_csv(file_path)

df = load_data('supply_chain_data.csv')

with st.spinner('Loading app...'):
    time.sleep(1)

st.markdown(
    """
    <div style='text-align: center;'>
        <h1 style='font-size: 5em; font-family: "Comic Sans MS", cursive, sans-serif; font-weight: 600; color: #f63366;'> Supply Chain Dashboard</h1>
    </div>
    """,
    unsafe_allow_html=True
)

with st.expander("ðŸ“‹ Show Dataset"):
    st.write(df)

st.markdown(
    """
    ### Key Insights
    - **Revenue Growth: Strategic supply chain optimization drove a 15% increase in total revenue, reflecting improved efficiency and customer demand fulfillment.
    - **Faster Deliveries: Enhanced logistics and smarter route planning led to a 20% reduction in lead times, boosting responsiveness and customer satisfaction.
    - **Cost Efficiency: Adoption of leaner, cost-effective operations resulted in a 10% decrease in overall expenses, contributing to better margins and profitability.

    #### How This Helps in Business:
    - **Improved Customer Experience: Reduced lead times and streamlined operations ensure faster, more reliable deliveries, significantly enhancing customer satisfaction.
    - **Smarter Budgeting: Clear visibility into cost distribution enables more strategic budgeting and efficient resource allocation, maximizing operational efficiency.
    - **Accelerated Revenue Growth: Actionable insights from supply chain data empower data-driven decision-making, fueling sustained revenue growth.
    """,
    unsafe_allow_html=True
)

# Create three columns
col1, col2, col3 = st.columns(3)

with col1:
    #plot4
    fig = px.scatter(df,
                 x='Manufacturing costs',
                 y='Revenue generated',
                 size='Price',
                 color='Product type',
                 hover_name='SKU',
                 title='Relationship between Manufacturing Costs and Revenue Generated',
                 labels={'Manufacturing costs': 'Manufacturing Costs ($)', 'Revenue generated': 'Revenue Generated ($)', 'Product type': 'Product Type'},
                 template='plotly_dark',
                 color_discrete_sequence=px.colors.qualitative.Dark24
                )

    fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)


    #plot3
    query = """
    SELECT "Product Type",
    SUM("Revenue generated")::DECIMAL(8, 2) AS total_revenue
    FROM df
    GROUP BY "Product Type"
    ORDER BY total_revenue DESC
    """
    result = duckdb.query(query).df()

    fig = px.bar(result,
             x='Product type',
             y='total_revenue',
             title='Revenue Generated by Product Type',
             labels={'total_revenue': 'Total Revenue ($)', 'Product Type': 'Product Type'})

    fig.update_layout(
        xaxis_title="Product Type",
        yaxis_title="Total Revenue ($)",
        yaxis_tickprefix="$",
        yaxis_tickformat=".2f",
        margin=dict(l=40, r=40, t=40, b=40),
        font=dict(size=14),
        font_color='white',
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        bargap=0,
        bargroupgap=0.1
    )


    fig.update_traces(marker=dict(color=['#813cf6', '#15abbd', '#df9def']))

    st.plotly_chart(fig)

    #plo1
    query = """
    SELECT SUM("Revenue generated")::DECIMAL(8, 2) AS total_revenue
    FROM df
    """
    result = duckdb.query(query).df()

    total_revenue = result['total_revenue'][0]

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode = "number",
        value = total_revenue,
        title = {"text": "Total Revenue Generated"},
        number = {'prefix': "$", 'valueformat': ".2f"},
        domain = {'x': [0, 1], 'y': [0, 1]}
    ))

    fig.update_layout(
        font=dict(size=18),
        font_color = 'white',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot8
    profitability_by_product = df.groupby('Product type').agg(
        Revenue=('Revenue generated', 'sum'),
        Cost=('Costs', 'sum')
        ).reset_index()

    profitability_by_product['Profit'] = (profitability_by_product['Revenue'] - profitability_by_product['Cost']).round(2)

    profitability_by_product = profitability_by_product.sort_values(by='Product type')

    fig = px.bar(profitability_by_product,
             x='Product type',
             y='Profit',
             title='Overall Profitability by Product Type',
             labels={'Profit': 'Profit ($)', 'Product type': 'Product Type'},
             color='Profit',
             color_continuous_scale=px.colors.diverging.RdYlGn,
            )

    fig.update_layout(
        xaxis_title="Product Type",
        yaxis_title="Profit ($)",
        font=dict(size=14,color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        bargap=0.1,
    )

    st.plotly_chart(fig)


    #plot5
    cost_summary = df.groupby('Inspection results').agg({'Manufacturing costs': 'sum'}).reset_index()

    total_costs = cost_summary['Manufacturing costs'].sum()

    cost_summary['Percentage Contribution'] = (cost_summary['Manufacturing costs'] / total_costs * 100).round(2)

    cost_summary['Manufacturing costs'] = cost_summary['Manufacturing costs'].astype(float).round(2)
    cost_summary['Percentage Contribution'] = cost_summary['Percentage Contribution'].astype(float).round(2)

    cost_summary = cost_summary.sort_values(by='Manufacturing costs', ascending=False)

    fig = px.pie(
    cost_summary,
    names='Inspection results',
    values='Manufacturing costs',
    title='Manufacturing Costs by Inspection Results',
    color_discrete_sequence=px.colors.qualitative.Pastel1
    )

    fig.update_traces(
        hoverinfo='label+value+percent',
        textinfo='value+percent'
    )

    fig.update_layout(
        font=dict(size=14,color='white'),
        showlegend=True,
        legend_title_text='Inspection Results',
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot2
    query = """
    SELECT
        SUM("stock levels") AS "Stock Levels",
        SUM("Lead Times") AS "Lead Times"
    FROM
        df;
    """
    result = duckdb.query(query).df()
    total_stock_levels = result['Stock Levels'][0]
    total_lead_times = result['Lead Times'][0]

    fig_stock_levels = go.Figure(go.Indicator(
    mode="number+gauge",
    value=total_stock_levels,
    # title={'text': "Total Stock Levels"},
    gauge={
        'axis': {'range': [0, max(total_stock_levels, total_lead_times) + 100]},
        'bar': {'color': "rgba(31, 119, 180, 0.8)"},
        'steps': [
            {'range': [0, max(total_stock_levels, total_lead_times) / 2], 'color': "lightgray"},
            {'range': [max(total_stock_levels, total_lead_times) / 2, max(total_stock_levels, total_lead_times)], 'color': "gray"}
        ],
        'threshold': {
            'line': {'color': "red", 'width': 4},
            'thickness': 0.75,
            'value': total_stock_levels
            }
        }
    ))

    fig_stock_levels.update_layout(
        title={'text': "Total Stock Levels", 'font': {'size': 20}},
        font=dict(size=18, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig_stock_levels)

    #plot10
    mode_counts = df['Transportation modes'].value_counts()

    fig = go.Figure()

    fig.add_trace(go.Pie(
        labels=mode_counts.index,
        values=mode_counts.values,
        textinfo='percent+label',
        marker_colors=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728'],
        textposition='inside',
        hole=0.3
    ))

    fig.update_layout(
        title='Frequency of Transportation Modes',
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',

    )

    st.plotly_chart(fig)

    #plot7
    df['Total shipping costs'] = df['Number of products sold'] * df['Shipping costs']

    fig = px.scatter(df,
                 x='Number of products sold',
                 y='Total shipping costs',
                 size='Price',
                 color='Customer demographics',
                 hover_name='SKU',
                 title='Relationship between Number of Products Sold and Total Shipping Costs',
                 labels={'Number of products sold': 'Number of Products Sold', 'Total shipping costs': 'Total Shipping Costs ($)', 'Customer demographics': 'Customer Segment'},
                 template='plotly_dark'
                )

    fig.update_traces(marker=dict(line=dict(width=1, color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot6
    result = df.groupby('Location')['Order quantities'].sum().reset_index()

    result = result.sort_values(by='Order quantities', ascending=False)

    fig = px.bar(result, x='Location', y='Order quantities',
             title='Order Quantities by Location',
             labels={'Location': 'Location', 'Order quantities': 'Total Order Quantities'},
             color='Location',
             color_discrete_sequence=px.colors.qualitative.Dark24,
             )

    fig.update_layout(
    xaxis_title="Location",
    yaxis_title="Total Order Quantities",
    font=dict(size=14,color='white'),
    plot_bgcolor='rgba(0, 0, 0, 0)',
    paper_bgcolor='rgba(0, 0, 0, 0)',
    bargap=0.1,
    )

    st.plotly_chart(fig)


    #plot9
    numeric_columns = ['Shipping times', 'Lead times']

    transport_summary = df.groupby('Transportation modes')[numeric_columns].mean().reset_index()

    fig = px.line(transport_summary,
              x='Shipping times',
              y='Lead times',
              color='Transportation modes',
              title='Average Lead Times vs. Shipping Times by Transportation Mode',
              labels={'Shipping times': 'Shipping Times (days)', 'Lead times': 'Lead Times (days)', 'Transportation modes': 'Transportation Mode'},
              template='plotly_dark',
              line_shape='spline'
             )

    fig.update_traces(mode='lines+markers')

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot11
    location_summary = df.groupby('Location').agg({'Production volumes': 'sum', 'Manufacturing costs': 'sum'}).reset_index()

    fig = px.scatter(location_summary,
                 x='Production volumes',
                 y='Manufacturing costs',
                 color='Location',
                 size='Production volumes',
                 hover_name='Location',
                 title='Relationship between Production Volumes and Manufacturing Costs by Location',
                 labels={'Production volumes': 'Production Volumes', 'Manufacturing costs': 'Manufacturing Costs', 'Location': 'Location'},
                 size_max=30)

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        showlegend=True,
        xaxis_title='Production Volumes',
        yaxis_title='Manufacturing Costs'
    )

    st.plotly_chart(fig)
with col2:
    query = """
    SELECT
        SUM("Order quantities") AS "Total Orders Quantity"
    FROM
        df;
    """

    result = duckdb.query(query).fetchall()

    total_orders_quantity = result[0][0]

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="number",
        value=total_orders_quantity,
        title={"text": "Total Orders Quantity"},
        number={"valueformat": ",.0f"}
    ))

    fig.update_layout(
        font=dict(size=18, color='white'),
        margin=dict(l=20, r=20, t=80, b=20),
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot3
    query = """
    SELECT "location",
           SUM("Revenue generated")::DECIMAL(8, 2) AS total_revenue
    FROM df
    GROUP BY "location"
    ORDER BY total_revenue DESC
    """
    result = duckdb.query(query).df()

    fig = px.pie(result,
             values='total_revenue',
             names='Location',
             title='Revenue Distribution by Location',
             labels={'total_revenue': 'Total Revenue ($)', 'Location': 'Location'},
             hover_name='Location',
             hover_data={'total_revenue': ':,.2f'}
            )

    fig.update_layout(
        margin=dict(l=40, r=40, t=40, b=40),
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    fig.update_traces(marker=dict(colors=['#d62728', '#e377c2', '#ff7f0e', '#ffbb78', '#ff9896']))

    fig.update_layout(
        showlegend=True,
        legend=dict(
            title='Location',
            orientation='v',
            yanchor='top',
            y=1,
            xanchor='left',
            x=0
        )
    )

    st.plotly_chart(fig)

    supplier_summary = df.groupby('Supplier name')['Manufacturing costs'].sum().reset_index()

    fig = px.bar(
        supplier_summary,
        x='Supplier name',
        y='Manufacturing costs',
        title='Distribution of Manufacturing Costs by Supplier',
        labels={'Supplier name': 'Supplier Name', 'Manufacturing costs': 'Manufacturing Costs ($)'},
        color='Supplier name',
        color_discrete_sequence=px.colors.qualitative.Set3_r
    )

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        xaxis={'categoryorder':'total descending'}
    )

    st.plotly_chart(fig)


    #plot2
    fig_lead_times = go.Figure(go.Indicator(
    mode="number+gauge",
    value=total_lead_times,
    # title={'text': "Total Lead Times"},
    gauge={
        'axis': {'range': [0, max(total_stock_levels, total_lead_times) + 100]},
        'bar': {'color': "rgba(214, 39, 40, 0.8)"},
        'steps': [
            {'range': [0, max(total_stock_levels, total_lead_times) / 2], 'color': "lightgray"},
            {'range': [max(total_stock_levels, total_lead_times) / 2, max(total_stock_levels, total_lead_times)], 'color': "gray"}
        ],
        'threshold': {
            'line': {'color': "red", 'width': 4},
            'thickness': 0.75,
            'value': total_lead_times
            }
        }
    ))

    fig_lead_times.update_layout(
        title={'text': "Total Lead Times", 'font': {'size': 20}},
        font=dict(size=18, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig_lead_times)


    #plot5
    # Calculate sum of price and manufacturing costs for each product type
    price_costs_by_product = df.groupby('Product type').agg(
        Price=('Price', 'sum'),
        Manufacturing_costs=('Manufacturing costs', 'sum')
    ).reset_index()

    # Format sums of price and manufacturing costs
    price_costs_by_product['Price'] = price_costs_by_product['Price'].round(2)
    price_costs_by_product['Manufacturing_costs'] = price_costs_by_product['Manufacturing_costs'].round(2)

    # Calculate difference between price and manufacturing costs
    price_costs_by_product['Profit_margin'] = (price_costs_by_product['Price'] - price_costs_by_product['Manufacturing_costs']).round(2)

    # Sort by Product type in ascending order
    price_costs_by_product = price_costs_by_product.sort_values(by='Product type')
    fig = px.bar(price_costs_by_product,
             x='Product type',
             y=['Price', 'Manufacturing_costs'],
             title='Comparison of Price and Manufacturing Costs by Product Type',
             labels={'value': 'Cost ($)', 'Product type': 'Product Type', 'variable': 'Cost Type'},
             color_discrete_sequence=['#d62728', '#e377c2'],
             barmode='group'
            )

    for i, row in price_costs_by_product.iterrows():
        fig.add_annotation(
            x=row['Product type'],
            y=row['Price'] + 5,
            text=f"Profit Margin: ${row['Profit_margin']}",
            showarrow=False,
            font=dict(size=10, color='White'),
        )

    fig.update_layout(
        xaxis_title="Product Type",
        yaxis_title="Cost ($)",
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        bargap=0.2,
    )

    st.plotly_chart(fig)

    #plot7
    shipping_summary = df.groupby('Shipping carriers')['Shipping costs'].sum().reset_index()

    fig = px.bar(
        shipping_summary,
        x='Shipping carriers',
        y='Shipping costs',
        title='Distribution of Shipping Costs by Shipping Carriers',
        labels={'Shipping carriers': 'Shipping Carriers', 'Shipping costs': 'Shipping Costs ($)'},
        color='Shipping carriers',
        color_discrete_sequence=px.colors.qualitative.Set2
    )

    fig.update_layout(
        font=dict(size=14, color='White'),
        xaxis_title=None,
        yaxis_title='Shipping Costs ($)',
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot6
    total_production_volumes = df['Production volumes'].sum()
    total_stock_levels = df['Stock levels'].sum()
    total_order_quantities = df['Order quantities'].sum()

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=[total_production_volumes, total_stock_levels, total_order_quantities],
        theta=['Production Volumes', 'Stock Levels', 'Order Quantities'],
        fill='toself',
        name='Metrics',
        line_color='green'
        ))

    fig.update_layout(
        title='Relationship between Production Volume, Stock Levels, and Order Quantities',
        font=dict(size=14,color='white'),
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, max(total_production_volumes, total_stock_levels, total_order_quantities)],
                color = 'green'
            )
        ),
        showlegend=True,
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        )

    st.plotly_chart(fig)

    #plot9
    route_counts = df['Routes'].value_counts()

    route_counts_df = route_counts.reset_index()
    route_counts_df.columns = ['Routes', 'Count']

    fig = px.scatter(route_counts_df, x='Routes', y='Count', size='Count', hover_name='Routes',
                 title='Bubble Chart of Transportation Routes with Count',
                 labels={'Routes': 'Transportation Routes', 'Count': 'Frequency'},
                 size_max=60)

    fig.update_layout(
        showlegend=False,
        xaxis_title="Transportation Routes",
        yaxis_title="Frequency",
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot8
    # Calculate average lead time for each product type
    average_lead_time_by_product = df.groupby('Product type')['Lead times'].mean().reset_index()

    # Format the average lead time to 4 decimal places
    average_lead_time_by_product['Average Lead Time'] = average_lead_time_by_product['Lead times'].round(2)

    # Sort by Product type in ascending order
    average_lead_time_by_product = average_lead_time_by_product.sort_values(by='Product type')

    fig = px.bar(average_lead_time_by_product,
             x='Product type',
             y='Average Lead Time',
             title='Average Lead Time by Product Type',
             labels={'Average Lead Time': 'Average Lead Time (days)', 'Product type': 'Product Type'},
             color='Average Lead Time',
             color_continuous_scale='viridis',
            )

    fig.update_layout(
        xaxis_title="Product Type",
        yaxis_title="Average Lead Time (days)",
        font=dict(size=14,color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        bargap=0.1,
    )

    st.plotly_chart(fig)


    #plot10
    location_summary = df.groupby('Location').agg({'Production volumes': 'sum'}).reset_index()

    total_production_volumes = location_summary['Production volumes'].sum()

    location_summary['Percentage'] = (location_summary['Production volumes'] / total_production_volumes) * 100

    location_summary = location_summary.sort_values(by='Production volumes', ascending=False)

    fig = px.pie(
        location_summary,
        names='Location',
        values='Percentage',
        title='Percentage of Production Volumes Aligned with Market Demands by Location',
        color_discrete_sequence=px.colors.qualitative.Set3
    )

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot12
    sum_defect_rates = df.groupby('Inspection results')['Defect rates'].sum().reset_index()

# Calculate the total defect rate
    total_defect_rate = df['Defect rates'].sum()

# Calculate the percentage contribution of each inspection result's defect rate
    sum_defect_rates['Percentage of Total Defect Rate'] = \
        (sum_defect_rates['Defect rates'] / total_defect_rate) * 100

# Calculate the average defect rate for each inspection result
    avg_defect_rate = df.groupby('Inspection results')['Defect rates'].mean().reset_index()

# Merge the results and order by 'Defect Rates'
    result = pd.merge(sum_defect_rates, avg_defect_rate, on='Inspection results', suffixes=('_sum', '_avg'))
    result = result.sort_values(by='Defect rates_sum', ascending=False)

    fig = px.sunburst(result, path=['Inspection results'], values='Defect rates_sum',
                  hover_data=['Percentage of Total Defect Rate', 'Defect rates_avg'],
                  title='Defect Rates by Inspection Results (Sunburst Chart)',
                  color='Defect rates_sum',
                  color_continuous_scale='RdBu')

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)
with col3:
    total_availability = df['Availability'].sum()

    fig = go.Figure()

    fig.add_trace(go.Indicator(
        mode="number",
        value=total_availability,
        title={"text": "Total Availability"},
        domain={'x': [0, 1], 'y': [0, 1]}
    ))

    fig.update_layout(
        font=dict(size=18, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',

    )

    st.plotly_chart(fig)

    order_summary = df.groupby('Transportation modes')['Order quantities'].sum().reset_index()

    fig = px.sunburst(
        order_summary,
        path=['Transportation modes'],
        values='Order quantities',
        title='Total Order Quantities by Transportation Mode',
        color='Order quantities',
        color_continuous_scale=px.colors.sequential.Blues,
        labels={'Transportation modes': 'Transportation Mode', 'Order quantities': 'Total Order Quantities'},
    )

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot4
    production_summary = df.groupby('Production volumes')['Manufacturing costs'].sum().reset_index()

    fig = px.scatter(production_summary,
                 x='Production volumes',
                 y='Manufacturing costs',
                 trendline='ols',
                 title='Manufacturing Costs vs. Production Volumes',
                 labels={'Manufacturing costs': 'Manufacturing Costs ($)', 'Production volumes': 'Production Volumes'},
                 hover_name='Production volumes',
                 trendline_color_override='red'
                )

    fig.update_layout(
    font=dict(size=14, color='white'),
    plot_bgcolor='rgba(0, 0, 0, 0)',
    paper_bgcolor='rgba(0, 0, 0, 0)',
    xaxis_title='Production Volumes',
    yaxis_title='Manufacturing Costs ($)',
    showlegend=True
    )

    st.plotly_chart(fig)
    #plot3
    price_revenue_summary = df.groupby('Price').agg({'Revenue generated': 'sum'}).reset_index()

    fig = px.line(price_revenue_summary,
              x='Price',
              y='Revenue generated',
              title='Revenue Generated by Price Range',
              labels={'Revenue generated': 'Total Revenue ($)', 'Price Range': 'Price Range'},
              markers=True)

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)

    #plot6
    shipping_order_summary = df.groupby('Shipping costs').agg({'Order quantities': 'mean'}).reset_index()

    fig = px.bar(shipping_order_summary,
             x='Shipping costs',
             y='Order quantities',
             title='Average Order Quantities by Shipping Cost Range',
             labels={'Order quantities': 'Average Order Quantities', 'Shipping Cost Range': 'Shipping Cost Range'},
             color='Shipping costs',
             color_discrete_sequence=px.colors.qualitative.Bold)

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        xaxis={'categoryorder': 'total descending'}
        )

    st.plotly_chart(fig)


    #plot5
    costs_by_product = df.groupby('Product type')['Manufacturing costs'].sum().reset_index()

    costs_by_product['Manufacturing costs'] = costs_by_product['Manufacturing costs'].round(2)

    costs_by_product = costs_by_product.sort_values(by='Manufacturing costs', ascending=False)

    fig = px.bar(costs_by_product,
             x='Product type',
             y='Manufacturing costs',
             title='Manufacturing Costs by Product Type',
             labels={'Manufacturing costs': 'Manufacturing Costs ($)', 'Product type': 'Product Type'},
             color='Product type',
             color_discrete_sequence=px.colors.qualitative.Dark24_r
            )

    fig.update_layout(
        xaxis_title="Product Type",
        yaxis_title="Manufacturing Costs ($)",
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        bargap=0.1,
    )

    st.plotly_chart(fig)

    #plot7
    transportation_summary = df.groupby('Transportation modes')['Shipping costs'].sum().reset_index()

    fig = px.bar(transportation_summary,
             x='Transportation modes',
             y='Shipping costs',
             color='Transportation modes',
             hover_name='Transportation modes',
             title='Shipping Costs by Transportation Mode',
             labels={'Shipping costs': 'Shipping Costs ($)', 'Transportation modes': 'Transportation Mode'},
             color_discrete_sequence=px.colors.qualitative.Safe)

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
        xaxis_title='Transportation Modes',
        yaxis_title='Shipping Costs ($)',
        showlegend=True
    )

    st.plotly_chart(fig)

    #plot9
    mode_summary = df.groupby('Transportation modes').agg({
    'Lead times': 'sum',
    'Costs': 'sum'
    }).reset_index()

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=mode_summary['Lead times'],
        y=mode_summary['Costs'],
        mode='markers',
        marker=dict(color='blue', size=12),
        text=mode_summary['Transportation modes'],
        hovertemplate='<b>Transport Mode</b>: %{text}<br><b>Lead Time</b>: %{x}<br><b>Cost</b>: %{y}',
    ))

    fig.update_layout(
        title='Relationship Between Transportation Modes, Lead Time, and Costs',
        xaxis_title='Lead Time',
        yaxis_title='Costs',
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)
     #plot8
    average_defect_rate = df.groupby('Product type').agg({'Defect rates': 'mean'}).reset_index()

    average_defect_rate['Defect rates'] = average_defect_rate['Defect rates'].round(2)

    average_defect_rate.columns = ['Product Type', 'Average Defect Rate']

    fig = px.pie(
    average_defect_rate,
    names='Product Type',
    values='Average Defect Rate',
    title='Average Defect Rate by Product Type',
    color_discrete_sequence=px.colors.qualitative.Pastel
    )

    fig.update_layout(
    font=dict(size=14,color='white'),
    showlegend=True,
    legend_title_text='Product Type',
    plot_bgcolor='rgba(0, 0, 0, 0)',
    paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)
    #plot11
    location_summary = df.groupby('Location').agg({'Production volumes': 'sum'}).reset_index()

    location_summary = location_summary.sort_values(by='Production volumes', ascending=False)

    fig = px.treemap(
        location_summary,
        path=['Location'],
        values='Production volumes',
        color='Production volumes',
        color_continuous_scale='Viridis',
        title='Production Volumes by Location'
    )

    fig.update_layout(
        font=dict(size=14, color='White'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)


    #plot12
    route_summary = df.groupby('Routes').agg({'Lead times': 'sum', 'Costs': 'sum'}).reset_index()

    route_summary = route_summary.sort_values(by='Lead times', ascending=False)

    route_summary['Costs'] = route_summary['Costs'].round(2)

    fig = px.parallel_categories(
        route_summary,
        dimensions=['Routes', 'Lead times', 'Costs'],
        color='Lead times',
        title='Impact of Routes on Lead Times and Costs',
        color_continuous_scale=px.colors.diverging.Tealrose
    )

    fig.update_layout(
        font=dict(size=14, color='white'),
        plot_bgcolor='rgba(0, 0, 0, 0)',
        paper_bgcolor='rgba(0, 0, 0, 0)',
    )

    st.plotly_chart(fig)
st.markdown(
    """
    <hr>
    <div style='text-align: center;'>
        <p style='font-size: 1.2em; font-family: "Arial", sans-serif;'>
            Â© 2024 All rights reserved by <a href='https://github.com/deepalikrishnakashyap' target='_blank'><img src='https://img.icons8.com/?size=100&id=LoL4bFzqmAa0&format=png&color=000000' height='30' style='vertical-align: middle;'></a>
        </p>
    </div>
    """,
    unsafe_allow_html=True
)
